# Static information for this action template
# Source: https://github.com/GitTools/actions
# Note: Make sure the checkout action is called with:  fetch-depth: 0
name: "Get GitVersion"
description: "Get the GitVersion version number for this build"

# Inputs (parameters) for this action
inputs:
  targetPath:
    description: Optionally supply the path to the working directory.
    required: false
    default: ''
  useConfigFile:
    description: Whether to use a custom configuration file.
    required: false
    default: true
  configFilePath:
    description: Optional path to config file (defaults to GitVersion.yml in kingtech repo).
    required: false
    default: ''
  updateAssemblyInfo:
    description: Whether to update versions in the AssemblyInfo files.
    required: false
    default: false
  updateAssemblyInfoFilename:
    description: Update versions in specified file.
    required: false
    default: ''
  additionalArguments:
    description: Additional arguments to send to GitVersion.
    required: false
    default: ''
outputs:
  version:
    description: The resulting version number.
    value: ${{ steps.gitversion.outputs.semVer }}

runs:
  using: "composite"
  steps:

  - name: Download GitVersion.yaml configuration
    if: ${{ inputs.useConfigFile == 'true' && inputs.configFilePath == '' }}
    shell: bash
    run: | 
      curl -LJO https://raw.githubusercontent.com/KingTechNL/githubactions/main/gitversion/GitVersion.yml
      echo Retrieved config file from repo.

  - name: "Set gitversion config."
    shell: bash
    run: |
      if ${{ inputs.configFilePath == '' }}
      then
        echo "GITVERSION_CONFIG=GitVersion.yml" >> $GITHUB_ENV
      else
        echo "GITVERSION_CONFIG=${{ inputs.configFilePath }}" >> $GITHUB_ENV
      fi
      echo "Gitversion config file is $GITVERSION_CONFIG"

  - name: Install GitVersion
    uses: gittools/actions/gitversion/setup@v0.9.7
    with:
      versionSpec: '5.9.0'

  - name: Determine Version
    id:   gitversion
    uses: gittools/actions/gitversion/execute@v0.9.7
    with:
      targetPath: "${{inputs.targetPath}}"
      useConfigFile: "${{inputs.useConfigFile}}"
      configFilePath: "${{ env.GITVERSION_CONFIG }}"
      updateAssemblyInfo: "${{inputs.updateAssemblyInfo}}"
      updateAssemblyInfoFilename: "${{inputs.updateAssemblyInfoFilename}}"
      additionalArguments: "${{inputs.additionalArguments}}"

  - name: Set environment variable VERSION
    shell: bash
    run: echo "VERSION=${{ steps.gitversion.outputs.semVer }}" >> $GITHUB_ENV
    #Retrieve by using:  'echo $VERSION'  or  'echo ${{ env.VERSION }}'

  - name: Set output
    id: search-files
    shell: bash
    #run: echo "::set-output name=version::${{ steps.gitversion.outputs.semVer}}"
    run: echo "echo "version=${{ steps.gitversion.outputs.semVer}}" >> $GITHUB_OUTPUT"

  - name: Extract branch name
    shell: bash
    id: extract-branch
    run: |
      echo "Current branch is $(echo ${GITHUB_REF#refs/heads/})"
      echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT

  - name: Set version tag based on branch  
    shell: bash
    id: branch-tag
    run: |
      if [[ "$BRANCH" == *"main"* ]]; then
        echo "Setting branch tag to: 'main'"
        echo "BRANCHTAG=main" >> $GITHUB_ENV
        echo "branchTag=main" >> $GITHUB_OUTPUT
      elif [[ "$BRANCH" == *"release"* ]]; then
        echo "Setting branch tag to: 'beta'"
        echo "BRANCHTAG=beta" >> $GITHUB_ENV
        echo "branchTag=beta" >> $GITHUB_OUTPUT
      elif [[ "$BRANCH" == *"development"* ]]; then
        echo "Setting branch tag to: 'alpha'"
        echo "BRANCHTAG=alpha" >> $GITHUB_ENV
        echo "branchTag=alpha" >> $GITHUB_OUTPUT
      else
        echo "Setting branch tag to: 'dev'"
        echo "BRANCHTAG=dev" >> $GITHUB_ENV
        echo "branchTag=dev" >> $GITHUB_OUTPUT
      fi

  - name: Display GitVersion outputs
    shell: bash
    run: |
      echo "Major: ${{ steps.gitversion.outputs.major }}"
      echo "Minor: ${{ steps.gitversion.outputs.minor }}"
      echo "Patch: ${{ steps.gitversion.outputs.patch }}"
      echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
      echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
      echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
      echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
      echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
      echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
      echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
      echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
      echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
      echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
      echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
      echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
      echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
      echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
      echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
      echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
      echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
      echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
      echo "Sha: ${{ steps.gitversion.outputs.sha }}"
      echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
      echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
      echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
      echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
      echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
      echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
      echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
      echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
      echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
      echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"